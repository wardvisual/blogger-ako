{
    request: < ref * 1 > IncomingMessage {
        _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: false,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: null,
            _closeAfterHandlingError: false,
            _readableState: [ReadableState],
            _events: [Object: null prototype],
            _eventsCount: 8,
            _maxListeners: undefined,
            _writableState: [WritableState],
            allowHalfOpen: true,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: [Server],
            _server: [Server],
            parser: [HTTPParser],
            on: [Function: socketListenerWrap],
            addListener: [Function: socketListenerWrap],
            prependListener: [Function: socketListenerWrap],
            setEncoding: [Function: socketSetEncoding],
            _paused: false,
            _httpMessage: [ServerResponse],
            [Symbol(async_id_symbol)]: 89,
            [Symbol(kHandle)]: [TCP],
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: true,
            [Symbol(kSetKeepAlive)]: false,
            [Symbol(kSetKeepAliveInitialDelay)]: 0,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
            'content-length',
            '147',
            'accept-encoding',
            'gzip, deflate, br',
            'Accept',
            '*/*',
            'User-Agent',
            'Thunder Client (https://www.thunderclient.com)',
            'Content-Type',
            'application/json',
            'Host',
            'localhost:3000',
            'Connection',
            'close'
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '/post',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: null,
            _closeAfterHandlingError: false,
            _readableState: [ReadableState],
            _events: [Object: null prototype],
            _eventsCount: 8,
            _maxListeners: undefined,
            _writableState: [WritableState],
            allowHalfOpen: true,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: [Server],
            _server: [Server],
            parser: [HTTPParser],
            on: [Function: socketListenerWrap],
            addListener: [Function: socketListenerWrap],
            prependListener: [Function: socketListenerWrap],
            setEncoding: [Function: socketSetEncoding],
            _paused: false,
            _httpMessage: [ServerResponse],
            [Symbol(async_id_symbol)]: 89,
            [Symbol(kHandle)]: [TCP],
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: true,
            [Symbol(kSetKeepAlive)]: false,
            [Symbol(kSetKeepAliveInitialDelay)]: 0,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
        },
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '',
        originalUrl: '/post',
        _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/post',
            path: '/post',
            href: '/post',
            _raw: '/post'
        },
        params: {},
        query: {},
        res: ServerResponse {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: undefined,
            outputData: [],
            outputSize: 0,
            writable: true,
            destroyed: false,
            _last: false,
            chunkedEncoding: false,
            shouldKeepAlive: false,
            maxRequestsOnConnectionReached: false,
            _defaultKeepAlive: true,
            useChunkedEncodingByDefault: true,
            sendDate: true,
            _removedConnection: false,
            _removedContLen: false,
            _removedTE: false,
            strictContentLength: false,
            _contentLength: null,
            _hasBody: true,
            _trailer: '',
            finished: false,
            _headerSent: false,
            _closed: false,
            socket: [Socket],
            _header: null,
            _keepAliveTimeout: 5000,
            _onPendingData: [Function: bound updateOutgoingData],
            req: [Circular * 1],
            _sent100: false,
            _expect_continue: false,
            _maxRequestsPerSocket: 0,
            locals: [Object: null prototype] {},
            writeHead: [Function: writeHead],
            end: [Function: end],
            statusCode: 201,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(kEndCalled)]: false,
            [Symbol(kNeedDrain)]: false,
            [Symbol(corked)]: 0,
            [Symbol(kOutHeaders)]: [Object: null prototype],
            [Symbol(kUniqueHeaders)]: null
        },
        secret: 'dasddsa_432$',
        cookies: [Object: null prototype] {},
        signedCookies: [Object: null prototype] {},
        _parsedOriginalUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: null,
            query: null,
            pathname: '/post',
            path: '/post',
            href: '/post',
            _raw: '/post'
        },
        sessionStore: MemoryStore {
            _events: [Object: null prototype],
            _eventsCount: 2,
            _maxListeners: undefined,
            sessions: [Object: null prototype] {},
            generate: [Function(anonymous)],
            [Symbol(kCapture)]: false
        },
        sessionID: 'B0IF3M4tvyq-Oq9XtXmoLDlPe0eDMyQv',
        session: Session { cookie: [Object] },
        logIn: [Function(anonymous)],
        login: [Function(anonymous)],
        logOut: [Function(anonymous)],
        logout: [Function(anonymous)],
        isAuthenticated: [Function(anonymous)],
        isUnauthenticated: [Function(anonymous)],
        _sessionManager: SessionManager {
            _key: 'passport',
            _serializeUser: [Function: bound]
        },
        _passport: { instance: [Authenticator] },
        body: {
            title: 'ed and linux',
            content: 'dsad dlsa;dl dsadddddddddd dsadk',
            imageUrl: 'gdsjdslkjad;sadas',
            userId: 7,
            categoryId: 7
        },
        _body: true,
        length: undefined,
        route: Route { path: '/post', stack: [Array], methods: [Object] },
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
            'content-length': '147',
            'accept-encoding': 'gzip, deflate, br',
            accept: '*/*',
            'user-agent': 'Thunder Client (https://www.thunderclient.com)',
            'content-type': 'application/json',
            host: 'localhost:3000',
            connection: 'close'
        },
        [Symbol(kHeadersCount)]: 14,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
    },
    exception: BadRequestException: Bad Request Exception
    at ValidationPipe.exceptionFactory(/home/wardvisual / app / blogger - yarn / api / node_modules / @nestjs / common / pipes / validation.pipe.js: 90: 20)
    at ValidationPipe.transform(/home/wardvisual / app / blogger - yarn / api / node_modules / @nestjs / common / pipes / validation.pipe.js: 66: 30)
    at processTicksAndRejections(node: internal / process / task_queues: 95: 5)
    at resolveParamValue(/home/wardvisual / app / blogger - yarn / api / node_modules / @nestjs / core / router / router - execution - context.js: 147: 23)
    at async Promise.all(index 1)
    at pipesFn(/home/wardvisual / app / blogger - yarn / api / node_modules / @nestjs / core / router / router - execution - context.js: 150: 13)
    at / home / wardvisual / app / blogger - yarn / api / node_modules / @nestjs / core / router / router - execution - context.js: 37: 30 {
        response: { statusCode: 400, message: [Array], error: 'Bad Request' },
        status: 400
    }
}